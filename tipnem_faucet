2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:02 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:02 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:03 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20) source: 'Exceeded connection limit for user' }
2018-05-18 13:03 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:03 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20) source: 'Exceeded connection limit for user' }
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:03 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:03 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:04 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:04 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:05 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:05 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:06 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:06 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20) source: 'Exceeded connection limit for user' }
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20) source: 'Exceeded connection limit for user' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:15 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:15 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:15 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: tweet @tipnem balance
2018-05-18 13:16 +09:00: {"nem:xem": 1036390000}
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: tweet balance
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20) source: 'Exceeded connection limit for user' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:16 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:16 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:16 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:16 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: tipfaucet_test994870146119405568から1526617034004にリクエストを受け取りました。:Please give me NEM:XEM! ほいほい
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: {"nem:xem": 1036390000}
2018-05-18 13:17 +09:00: Executing (default): SELECT "userId", "userScreenName", "lastRequest", "lastText", "faucetCount" FROM "users" AS "users" WHERE "users"."userId" = '994870146119405568';
2018-05-18 13:17 +09:00: フォロワー数が50以下もしくはツイート数が100以下のため検証修了
2018-05-18 13:17 +09:00: favorite to request tweet.
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20) source: 'Exceeded connection limit for user' }
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20) source: 'Exceeded connection limit for user' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:17 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:17 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:17 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:17 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
{ SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
{ SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20) source: 'Exceeded connection limit for user' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: tweet @tipnem balance
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: {"nem:xem": 1036390000}
2018-05-18 13:18 +09:00: tweet balance
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:18 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:18 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:18 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:18 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
{ SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" VARCHAR(30) NOT NULL , "userScreenName" VARCHAR(20) NOT NULL, "lastRequest" VARCHAR(255) NOT NULL, "lastText" VARCHAR(255) NOT NULL, "faucetCount" INTEGER NOT NULL, PRIMARY KEY ("userId"));
2018-05-18 13:19 +09:00: Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2018-05-18 13:19 +09:00: Error: Status Code: 420
    at Request.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:277:28)
    at emitOne (events.js:116:13)
    at Request.emit (events.js:211:7)
    at Request.onRequestResponse (/home/ocknamo/workspace/tipnem_faucet/node_modules/request/request.js:1068:10)
    at emitOne (events.js:116:13)
    at ClientRequest.emit (events.js:211:7)
    at HTTPParser.parserOnIncomingClient [as onIncoming] (_http_client.js:551:21)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:115:23)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
2018-05-18 13:19 +09:00: { SyntaxError: Unexpected token E in JSON at position 0
    at JSON.parse (<anonymous>)
    at Parser.receive (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/parser.js:40:21)
    at IncomingMessage.<anonymous> (/home/ocknamo/workspace/tipnem_faucet/node_modules/twitter/lib/twitter.js:284:14)
    at emitOne (events.js:121:20)
    at IncomingMessage.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at IncomingMessage.Readable.push (_stream_readable.js:208:10)
    at HTTPParser.parserOnBody (_http_common.js:139:22)
    at TLSSocket.socketOnData (_http_client.js:440:20)
    at emitOne (events.js:116:13)
    at TLSSocket.emit (events.js:211:7)
    at addChunk (_stream_readable.js:263:12)
    at readableAddChunk (_stream_readable.js:250:11)
    at TLSSocket.Readable.push (_stream_readable.js:208:10)
    at TLSWrap.onread (net.js:607:20)
  source: 'Easy there, Turbo. Too many requests recently. Enhance your calm.' }
